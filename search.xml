<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub快速搭建个人博客</title>
    <url>/2019/12/01/Hexo+GitHub%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p>
</blockquote>
<h3 id="一、-安装篇"><a href="#一、-安装篇" class="headerlink" title="一、 安装篇"></a>一、 安装篇</h3><h4 id="1-安装前提"><a href="#1-安装前提" class="headerlink" title="1. 安装前提"></a>1. 安装前提</h4><ul>
<li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li>Git</li>
</ul>
<h4 id="2-安装-Hexo-npm-install-g-hexo"><a href="#2-安装-Hexo-npm-install-g-hexo" class="headerlink" title="2. 安装 Hexo   $ npm install -g hexo"></a>2. 安装 Hexo   <code>$ npm install -g hexo</code></h4><h4 id="3-安装以后，可以使用以下两种方式执行-Hexo："><a href="#3-安装以后，可以使用以下两种方式执行-Hexo：" class="headerlink" title="3. 安装以后，可以使用以下两种方式执行 Hexo："></a>3. 安装以后，可以使用以下两种方式执行 Hexo：</h4><ul>
<li><code>npx hexo &lt;command&gt;</code></li>
<li>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中 <code>echo &#39;PATH=&quot;$PATH:./node_modules/.bin&quot;&#39; &gt;&gt; ~/.profile</code> 即可直接使用 <code>hexo &lt;command&gt;</code>：</li>
</ul>
<h3 id="二、建站篇"><a href="#二、建站篇" class="headerlink" title="二、建站篇"></a>二、建站篇</h3><h4 id="1-安装-Hexo-完成后，请执行下列命令，Hexo-将会在指定文件夹中新建所需要的文件。"><a href="#1-安装-Hexo-完成后，请执行下列命令，Hexo-将会在指定文件夹中新建所需要的文件。" class="headerlink" title="1. 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。"></a>1. 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</h4><ul>
<li><p><code>$ hexo init &lt;folder&gt;</code></p>
</li>
<li><p><code>$ cd &lt;folder&gt;</code></p>
</li>
<li><p><code>$ npm install</code></p>
<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">├── _config.yml     <span class="comment">// 配置文件</span></span><br><span class="line">├── package.json    </span><br><span class="line">├── scaffolds       <span class="comment">// 模版文件夹</span></span><br><span class="line">├── source          <span class="comment">// 资源文件夹</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes          <span class="comment">//主题文件夹</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="三、写作篇"><a href="#三、写作篇" class="headerlink" title="三、写作篇"></a>三、写作篇</h3><h4 id="1-你可以执行下列命令来创建一篇新文章或者新的页面-hexo-new-lt-title-gt-可以文件夹-posts目录下将会看到已经创建的文件"><a href="#1-你可以执行下列命令来创建一篇新文章或者新的页面-hexo-new-lt-title-gt-可以文件夹-posts目录下将会看到已经创建的文件" class="headerlink" title="1. 你可以执行下列命令来创建一篇新文章或者新的页面$ hexo new &lt;title&gt;, 可以文件夹_posts目录下将会看到已经创建的文件"></a>1. 你可以执行下列命令来创建一篇新文章或者新的页面<code>$ hexo new &lt;title&gt;</code>, 可以文件夹_posts目录下将会看到已经创建的文件</h4><ul>
<li><p>eg: hello-world.md</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">    ---</span></span><br><span class="line"><span class="code">    title: Hello World           </span></span><br><span class="line"><span class="code">    date: 2018/7/13 20:46:25</span></span><br><span class="line"><span class="code">    categories:</span></span><br><span class="line"><span class="code">        - Life</span></span><br><span class="line"><span class="code">        - Diary</span></span><br><span class="line"><span class="code">    tags:</span></span><br><span class="line"><span class="code">        - PS3</span></span><br><span class="line"><span class="code">        - Games</span></span><br><span class="line"><span class="code">    ---</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&lt;!-- 内容区域 --&gt;</span><br><span class="line">Hello World!!!</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="四、命令篇"><a href="#四、命令篇" class="headerlink" title="四、命令篇"></a>四、命令篇</h3><h4 id="1-服务器（Hexo-3-0-把服务器独立成了个别模块，您必须先安装-hexo-server-才能使用）"><a href="#1-服务器（Hexo-3-0-把服务器独立成了个别模块，您必须先安装-hexo-server-才能使用）" class="headerlink" title="1. 服务器（Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用）"></a>1. 服务器（Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用）</h4><ul>
<li><code>$ npm install hexo-server --save</code></li>
<li><code>$ hexo server</code>  // 启动服务器，体验Hexo</li>
<li><code>$ hexo server -p 5000</code> // 端口号被占用时，可以更换端口启动服务器</li>
<li><code>$ hexo generate</code>  // 使用 Hexo 生成静态文件</li>
<li><code>$ hexo generate --watch</code>  // Hexo 能够监视文件变动并立即重新生成静态文件</li>
</ul>
<h4 id="2-完成后部署（部署之前需要安装一个扩展：-npm-install-hexo-deployer-git-save）"><a href="#2-完成后部署（部署之前需要安装一个扩展：-npm-install-hexo-deployer-git-save）" class="headerlink" title="2. 完成后部署（部署之前需要安装一个扩展： $ npm install hexo-deployer-git --save）"></a>2. 完成后部署（部署之前需要安装一个扩展： <code>$ npm install hexo-deployer-git --save</code>）</h4><ul>
<li><code>$ hexo generate --deploy</code> 可以简写为 <code>$ hexo g -d</code></li>
<li><code>$ hexo deploy --generate</code> 可以简写为 <code>$ hexo d -g</code></li>
</ul>
<h3 id="五、部署篇-将-Hexo-部署到-GitHub-Pages"><a href="#五、部署篇-将-Hexo-部署到-GitHub-Pages" class="headerlink" title="五、部署篇 (将 Hexo 部署到 GitHub Pages)"></a>五、部署篇 (将 Hexo 部署到 GitHub Pages)</h3><h4 id="1-你需要有个GitHub账号，新建一个repository，repository要直接命名为-lt-你的GitHub用户名-gt-github-io，你博客的域名将是-lt-你的GitHub用户名-gt-github-io（-项目名称必须是这个-）。"><a href="#1-你需要有个GitHub账号，新建一个repository，repository要直接命名为-lt-你的GitHub用户名-gt-github-io，你博客的域名将是-lt-你的GitHub用户名-gt-github-io（-项目名称必须是这个-）。" class="headerlink" title="1. 你需要有个GitHub账号，新建一个repository，repository要直接命名为 &lt;你的GitHub用户名&gt;.github.io，你博客的域名将是 &lt;你的GitHub用户名&gt;.github.io（**项目名称必须是这个!!!**）。"></a>1. 你需要有个GitHub账号，新建一个repository，repository要直接命名为 <code>&lt;你的GitHub用户名&gt;.github.io</code>，你博客的域名将是 <code>&lt;你的GitHub用户名&gt;.github.io</code>（**项目名称必须是这个!!!**）。</h4><h4 id="2-将你的-Hexo-站点文件夹推送到-repository-中"><a href="#2-将你的-Hexo-站点文件夹推送到-repository-中" class="headerlink" title="2. 将你的 Hexo 站点文件夹推送到 repository 中"></a>2. 将你的 Hexo 站点文件夹推送到 repository 中</h4><ul>
<li><p>设置git推送的账户（之前没有推送过）</p>
<ul>
<li><code>git config --global user.name &quot;xxx&quot;</code></li>
<li><code>git config --global user.email &quot;xxx@gmail.com&quot;</code></li>
</ul>
</li>
<li><p>GitHub 配置公钥</p>
<ul>
<li>输入 <code>cd ~/.ssh</code>，检查是否有.ssh的文件夹，输入<code>ls</code>查看。如果有id_rsa,id_rsa_pub,known_hosts,则说明存在。</li>
<li>输入 <code>ssh-keygen -t rsa -C &quot;你的github邮箱地址&quot;</code> ,连续三个回车，生成密钥，也会自动生成两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）</li>
<li>输入<code>eval &quot;$(ssh-agent -s)&quot;</code>，添加密钥到 ssh-agent</li>
<li>输入<code>ssh-add ~/.ssh/id_rsa</code>，添加生成的 SSH key 到 ssh-agent</li>
<li>登录Github，点击头像下的settings，点击 SSH and GPG keys，点击 右侧的 new SSH key，用VS Code打开<code>id_rsa.pub</code>，全部复制粘贴到新建的 SSH key 中。</li>
</ul>
</li>
<li><p>配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）,配置成如下效果。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">deploy<span class="punctuation">:</span></span><br><span class="line">type<span class="punctuation">:</span> git</span><br><span class="line">repo<span class="punctuation">:</span> git@github.com<span class="punctuation">:</span>boyue0/boyue0.github.io.git</span><br><span class="line">branch<span class="punctuation">:</span> master</span><br></pre></td></tr></table></figure></li>
<li><p>使用命令：<code>hexo d g</code>，生成以及部署, 完成部署后，即可访问 <code>https://&lt;你的GitHub用户名&gt;.github.io</code>查看你的博客</p>
</li>
</ul>
<h3 id="六、插件篇"><a href="#六、插件篇" class="headerlink" title="六、插件篇"></a>六、插件篇</h3><h4 id="1-Hexo-利用-browsersync-进行自动刷新：-修改-Markdown-文件并保存后浏览器可以自动刷新"><a href="#1-Hexo-利用-browsersync-进行自动刷新：-修改-Markdown-文件并保存后浏览器可以自动刷新" class="headerlink" title="1. Hexo 利用 browsersync 进行自动刷新： (修改 Markdown 文件并保存后浏览器可以自动刷新)"></a>1. Hexo 利用 browsersync 进行自动刷新： (修改 Markdown 文件并保存后浏览器可以自动刷新)</h4><ul>
<li><p><code>npm install -g browser-sync</code>    // 安装 Browsersync</p>
</li>
<li><p><code>npm install hexo-browsersync --save</code>   // 安装 Hexo 插件</p>
<p><strong>更多好用插件请移步：<a href="https://hexo.io/plugins/">Hexo插件库</a></strong></p>
</li>
</ul>
<h3 id="七、主题篇-（一些好看的主题）"><a href="#七、主题篇-（一些好看的主题）" class="headerlink" title="七、主题篇 （一些好看的主题）"></a>七、主题篇 （一些好看的主题）</h3><h4 id="1-Butterfly"><a href="#1-Butterfly" class="headerlink" title="1. Butterfly"></a>1. Butterfly</h4><ul>
<li>Github 地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> </li>
<li>在线演示：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></li>
<li>安装教程：<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></li>
</ul>
<h4 id="2-ayer"><a href="#2-ayer" class="headerlink" title="2. ayer"></a>2. ayer</h4><ul>
<li>Github 地址：<a href="https://github.com/shen-yu/hexo-theme-ayer">https://github.com/shen-yu/hexo-theme-ayer</a></li>
<li>在线演示：<a href="https://shen-yu.gitee.io/">https://shen-yu.gitee.io/</a></li>
<li>安装教程：<a href="https://shen-yu.gitee.io/2019/ayer/">https://shen-yu.gitee.io/2019/ayer/</a></li>
</ul>
<h4 id="3-Fluid"><a href="#3-Fluid" class="headerlink" title="3. Fluid"></a>3. Fluid</h4><ul>
<li>Github 地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a> </li>
<li>在线演示：<a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a> </li>
<li>安装教程：Hexo Fluid 用户手册 (fluid-dev.com)</li>
</ul>
<h4 id="4-black-blue"><a href="#4-black-blue" class="headerlink" title="4. black-blue"></a>4. black-blue</h4><ul>
<li><p>Github 地址：<a href="https://github.com/maochunguang/black-blue">https://github.com/maochunguang/black-blue</a></p>
</li>
<li><p>在线演示：<a href="https://geeksblog.cc/">https://geeksblog.cc/</a></p>
</li>
<li><p>安装教程：<a href="https://github.com/maochunguang">https://github.com/maochunguang</a></p>
<p><strong>更多好看主题请移步：<a href="https://hexo.io/themes/">Hexo主题库</a></strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>aaa</tag>
      </tags>
  </entry>
  <entry>
    <title>react项目接入单测</title>
    <url>/2020/08/30/react%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5%E5%8D%95%E6%B5%8B/</url>
    <content><![CDATA[<h4 id="1-npm包依赖项配置"><a href="#1-npm包依赖项配置" class="headerlink" title="1. npm包依赖项配置"></a>1. npm包依赖项配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入jest</span></span><br><span class="line">npm install jest@<span class="number">26.6</span><span class="number">.3</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接入bamboo使用，不接入可不引入</span></span><br><span class="line">npm install jest-bamboo-reporter -D </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出报告</span></span><br><span class="line">npm install jest-html-reporter -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enzyme 是一个用于 React 的 JavaScript 测试实用程序，可以更轻松地测试 React 组件的输出</span></span><br><span class="line">npm install enzyme enzyme-adapter-react-<span class="number">16</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用babel</span></span><br><span class="line">npm i babel-jest @babel/core @babel/preset-env</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="2-jest配置"><a href="#2-jest配置" class="headerlink" title="2. jest配置"></a>2. jest配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jest.conf.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">clearMocks</span>: <span class="literal">true</span>, <span class="comment">// 每次测试前自动清除模拟调用、实例和结果。相当于在每次测试之前调用 jest.clearAllMocks()</span></span><br><span class="line">  <span class="attr">collectCoverageFrom</span>: [ <span class="comment">// 需指定收集的覆盖率范围，这样统计的工程的覆盖率更加准确</span></span><br><span class="line">    <span class="string">&quot;&lt;rootDir&gt;/src/utils/util.js&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">collectCoverage</span>: <span class="literal">true</span>,<span class="comment">//需开启收集覆盖率报告开关</span></span><br><span class="line">  <span class="attr">coverageDirectory</span>: <span class="string">&quot;&lt;rootDir&gt;/test/coverage&quot;</span>,<span class="comment">//指定输出单元测试覆盖率报告路径，推荐为test/coverage</span></span><br><span class="line">  <span class="attr">coveragePathIgnorePatterns</span>: [</span><br><span class="line">    <span class="string">&quot;&lt;rootDir&gt;/build/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;rootDir&gt;/node_modules/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">moduleDirectories</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">moduleFileExtensions</span>: [<span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;node&#x27;</span>], <span class="comment">// 模块文件扩展名，可以将常用的文件类型放在左边</span></span><br><span class="line">  <span class="attr">moduleNameMapper</span>: &#123; <span class="comment">// 从正则表达式到模块名称或模块名称数组的映射，允许存根资源，例如具有单个模块的图像或样式</span></span><br><span class="line">    <span class="string">&#x27;^.+\\.(css|scss|less)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/test/style-mock.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@/(.*)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modulePaths</span>: [<span class="string">&quot;&lt;rootDir&gt;&quot;</span>],</span><br><span class="line">  <span class="attr">rootDir</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../&quot;</span>), <span class="comment">// 测试根目录</span></span><br><span class="line">  <span class="attr">roots</span>: [<span class="string">&quot;&lt;rootDir&gt;&quot;</span>], <span class="comment">// Jest 的检索文件的根目录</span></span><br><span class="line">  <span class="attr">reporters</span>: [ <span class="comment">//自定义报告</span></span><br><span class="line">    <span class="string">&quot;default&quot;</span>, <span class="comment">//需要添加jest的默认报告</span></span><br><span class="line">    [<span class="string">&quot;./node_modules/jest-html-reporter&quot;</span>, &#123; <span class="comment">//在额外补充jest-html-report，生成test-report.html文件</span></span><br><span class="line">      <span class="string">&quot;pageTitle&quot;</span>: <span class="string">&quot;Test Report&quot;</span>,</span><br><span class="line">      <span class="string">&quot;outputPath&quot;</span>: <span class="string">&quot;./test/report/test-report.html&quot;</span> <span class="comment">//推荐指定test-report.html的输出路径为test/report/test-report.html</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// setupFiles: [&#x27;jest-canvas-mock&#x27;],</span></span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;jsdom&#x27;</span>,  <span class="comment">//默认测试环境是node。如果你的工程是web app，可设置测试环境为jsdom，模拟浏览器环境</span></span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;&lt;rootDir&gt;/test/setup&#x27;</span>],</span><br><span class="line">  <span class="attr">testMatch</span>: [ <span class="comment">//匹配到的测试用例，建议将测试用例放置在test目录下</span></span><br><span class="line">    <span class="string">&quot;&lt;rootDir&gt;/test/**/*.spec.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;rootDir&gt;/test/**/*.spec.jsx&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">transform</span>: &#123;<span class="string">&quot;^.+\\.[t|j]sx?$&quot;</span>: <span class="string">&quot;babel-jest&quot;</span>&#125;,</span><br><span class="line">  <span class="attr">transformIgnorePatterns</span>: [<span class="string">&quot;/node_modules/&quot;</span>],</span><br><span class="line">  <span class="attr">testPathIgnorePatterns</span>: [<span class="string">&quot;/node_modules/&quot;</span>],<span class="comment">// 用正则来匹配不用测试的文件</span></span><br><span class="line">  <span class="attr">testResultsProcessor</span>: <span class="string">&quot;jest-bamboo-reporter&quot;</span>, <span class="comment">//自定义测试用例执行结果处理器，此处我们制定为jest-bamboo-report</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json中配置</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="comment">//执行单元测试时，指定配置文件和输出路径</span></span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;cross-env JEST_REPORT_FILE=&#x27;./test/report/test-report.json&#x27;  jest --config test/jest.conf.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">   <span class="string">&quot;react-app&quot;</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;@babel/plugin-syntax-dynamic-import&quot;</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="3-setup配置"><a href="#3-setup配置" class="headerlink" title="3. setup配置"></a>3. setup配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React的组件单元测试，以及快照测试，可以结合 enzyme或react-jest-renderer使用 创建setup文件</span></span><br><span class="line"><span class="comment">// setup.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;regenerator-runtime/runtime&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Enzyme</span> <span class="keyword">from</span> <span class="string">&quot;enzyme&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EnzymeAdapter</span> <span class="keyword">from</span> <span class="string">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class="line"><span class="title class_">Enzyme</span>.<span class="title function_">configure</span>(&#123;</span><br><span class="line">  <span class="attr">adapter</span>: <span class="keyword">new</span> <span class="title class_">EnzymeAdapter</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-mock数据配置"><a href="#4-mock数据配置" class="headerlink" title="4. mock数据配置"></a>4. mock数据配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// style-mock.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="5-测试方法文件"><a href="#5-测试方法文件" class="headerlink" title="5. 测试方法文件"></a>5. 测试方法文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    getUrlParams</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../src/utils/index&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&quot;getUrlParams&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;getUrlParams&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = getUrlParams;</span><br><span class="line">        <span class="title function_">expect</span>(<span class="keyword">typeof</span> result).<span class="title function_">toBe</span>(<span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<p>参考文档：<a href="https://www.jestjs.cn/docs/getting-started">https://www.jestjs.cn/docs/getting-started</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>单测</tag>
      </tags>
  </entry>
  <entry>
    <title>《史蒂夫·乔布斯传》</title>
    <url>/2020/01/30/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0/</url>
    <content><![CDATA[<p>史蒂夫·乔布斯传<br>沃尔特·艾萨克森<br>28个想法</p>
<p>◆ 版权信息</p>
<blockquote>
<p>那些疯狂到以为自己能够改变世界的人，才能真正改变世界</p>
</blockquote>
<p>◆ 前言 本书是如何诞生的</p>
<blockquote>
<p>一个具有强烈个性的人身上集合了人文和科学的天赋后所能产生的那种创造力，我相信这种创造力也是在21世纪建立创新型经济的关键因素</p>
</blockquote>
<p>◆ 第一章 童年</p>
<blockquote>
<p>我很幸运，因为当我还是个孩子的时候，我的父亲，还有希斯工具盒都让我相信，我能做出任何东西。</p>
</blockquote>
<p>◆ 第四章 雅达利与印度</p>
<blockquote>
<p>如果他认为某件事应该发生，那他就会尽力让它发生。</p>
</blockquote>
<blockquote>
<p>如果你表现得好像你能做某件事，那就能起到作用。我告诉他，装得好像你掌控了一切，别人就会以为你真的掌控了一切。</p>
</blockquote>
<p>◆ 第八章 施乐和丽萨</p>
<blockquote>
<p>好的执行力和杰出的创意同样重要</p>
</blockquote>
<p>◆ 第十三章 制造</p>
<blockquote>
<p>过程就是奖励</p>
</blockquote>
<p>◆ 第十六章 盖茨与乔布斯</p>
<blockquote>
<p>史蒂夫用自己超级蛊惑人心的方式，宣称Mac将如何改变世界，疯了似的让人们超负荷工作，气氛异常紧张，人际关系也很复杂</p>
</blockquote>
<blockquote>
<p>。苹果公司一直以来在执行上更富创新，更有想象力，也更有品位，而且他们的设计也更好。但是，虽然一开始微软只做出了一系列粗制滥造的复制品，它最终还是赢得了操作系统之争。这一事实说明世界并非完美：最好最创新的产品并非总是赢家</p>
</blockquote>
<p>◆ 第十七章 伊卡洛斯</p>
<blockquote>
<p>乔布斯精于操控别人，只要他愿意，他就能哄骗和迷惑其他人而不觉羞愧。但是，他并不善于算计和搞阴谋，尽管有些人不这么看；他不愿意也没耐心与别人交心。</p>
</blockquote>
<p>◆ 第十八章 NeXT</p>
<blockquote>
<p>就在此后，一位记者问乔布斯为什么这款电脑会推迟这么久，乔布斯回答说：“并不迟，它领先了时代5年</p>
</blockquote>
<p>◆ 第十九章 皮克斯</p>
<blockquote>
<p>人是创造性动物，面对工具，他们能想出发明者未曾想过的各种聪明的使用方法</p>
</blockquote>
<p>◆ 第二十章 凡人</p>
<blockquote>
<p>“他相信匮乏即是富足，自律产生喜悦，”她说，“他知道一个大多数人不知道的道理：物极必反</p>
</blockquote>
<p>◆ 第二十三章 复出</p>
<blockquote>
<p>长盛不衰的公司都知道如何重塑自我。</p>
</blockquote>
<p>◆ 第二十四章 非同凡想</p>
<blockquote>
<p>致疯狂的人。他们特立独行。他们桀骜不驯。他们惹是生非。他们格格不入。他们用与众不同的眼光看待事物。他们不喜欢墨守成规。他们也不愿安于现状。你可以认同他们，反对他们，颂扬或是诋毁他们。但唯独不能漠视他们。因为他们改变了寻常事物。他们推动人类向前迈进。或许他们是别人眼里的疯子，但他们却是我们眼中的天才。因为只有那些疯狂到以为自己能够改变世界的人……才能真正改变世界。</p>
</blockquote>
<p>◆ 第二十五章 设计原则</p>
<blockquote>
<p>简洁并不仅仅是视觉上的，也不仅仅是把杂乱无章的东西变少或抹掉，而是要挖掘复杂性的深度。要想获得简洁，你就必须要挖得足够深。</p>
</blockquote>
<p>◆ 第二十九章 数字中枢</p>
<blockquote>
<p>法德尔学到了一课：“史蒂夫关注当下，说话直来直去。有一次他告诉我：‘如果你一定要用幻灯片来讲，那说明你不知道自己要讲什么。’”</p>
</blockquote>
<p>◆ 第三十章 iTunes商店</p>
<blockquote>
<p>从苹果公司创立之初，我就意识到，我们的成功是来自知识产权。如果人们可以任意复制或偷取我们的软件，我们早就破产了。如果知识产权不受到保护，我们也没有动力再去制作新软件或设计新产品了。如果没有了对知识产权的保护，那么很多创意公司就会消失，或者根本不会出现。其实说到底，道理很简单：偷窃是不道德的。这样做会伤害其他人，也有损自己的名誉。</p>
</blockquote>
<p>各行各业都有自己的套路呢😄</p>
<blockquote>
<p>唱片公司赚钱的模式是在一张专辑中主打两三首好歌，另外填充一些一般的作品，然后一起打包出售</p>
</blockquote>
<blockquote>
<p>“他坐在一台苹果电脑前，就像是一个孩子在玩他心爱的玩具。和其他CEO不同，他对他的产品全心投入</p>
</blockquote>
<p>◆ 第三十一章 爱音乐的人</p>
<blockquote>
<p>在乔布斯的记忆中，唯一让他紧张得舌头打结的时刻就是见到鲍勃·迪伦</p>
</blockquote>
<p>◆ 第三十四章 第一回合</p>
<blockquote>
<p>记住自己很快就要死了，这是我面对人生重大选择时最重要的工具。因为，几乎一切——所有外界的期望，所有骄傲，所有对于困窘和失败的恐惧——这些东西都在死亡面前烟消云散，只留下真正重要的东西。记住自己终会死去，是我所知最好的方式，避免陷入认为自己会失去什么的陷阱。你已是一无所有，没理由不追随内心。</p>
</blockquote>
<blockquote>
<p>正如他在斯坦福大学演讲时所说的那样，疾病提醒着自己，已没有什么可失去的，因此他应该全速向前、锐意进取。</p>
</blockquote>
<p>◆ 第三十九章 飞向太空</p>
<blockquote>
<p>20年前我们相知不多。我们跟着感觉走，你让我着迷得飞上了天。当我们在阿瓦尼举行婚礼时天在下雪。很多年过去了，有了孩子们，有美好的时候，有艰难的时候，但从来没有过糟糕的时候。我们的爱和尊敬经历了时间的考验而且与日俱增。我们一起经历了那么多，现在我们回到20年前开始的地方——老了，也更有智慧了——我们的脸上和心上都有了皱纹。我们现在了解了很多生活的欢乐、痛苦、秘密和奇迹，我们依然在一起。我的双脚从未落回地面。</p>
</blockquote>
<p>◆ 第四十章 第三回合</p>
<blockquote>
<p>我有过很幸运的事业，有过很幸运的人生。”他回答说，“我已经做了我能做的一切。”</p>
</blockquote>
<p>◆ 第四十一章 遗产</p>
<blockquote>
<p>这牺牲了黑客精神，却创造出一种无缝而简单的用户体验</p>
</blockquote>
<blockquote>
<p>这虽然没有催生出最优雅的计算机，但是却帮助微软统治了操作系统世界。当苹果的市场份额缩小到5%以下时，微软的策略被视为个人电脑领域的胜利者。</p>
</blockquote>
<blockquote>
<p>如果你不忙着求生，你就在忙着求死</p>
</blockquote>
]]></content>
      <categories>
        <category>读书摘记</category>
      </categories>
      <tags>
        <tag>摘记</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度还原设计稿</title>
    <url>/2020/02/15/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%98%E5%8E%9F%E8%AE%BE%E8%AE%A1%E7%A8%BF/</url>
    <content><![CDATA[<h3 id="一-适配与还原"><a href="#一-适配与还原" class="headerlink" title="一. 适配与还原"></a>一. 适配与还原</h3><p>适配的目的是为保证用户体验，比如图片不失真、以及在不同大小的屏幕上呈现比例相同的页面布局，这也就是所谓的百分之百还原设计稿，或像素级还原设计稿。</p>
<p>H5适配手机主要有两个维度：</p>
<ul>
<li>适配不同像素密度 - 通常指图片如何在3倍屏和2倍屏上显示不失真。当然，适配原则非常简单：1个图片像素对应1个物理像素，图片就不会失真。(目前我们页面里的图片用的都是3倍图)</li>
<li>适配不同屏幕大小 - 原则非常简单,确保页面布局的度量与屏幕大小保持一定比例。（目前我们的设计稿都是750像素的）</li>
</ul>
<p>像素密度，顾名思义就是CSS中的1像素对应多少物理像素。我们以这张iPhone各代屏幕对照图（来源：<a href="https://www.paintcodeapp.com/news%EF%BC%89%E4%B8%BA%E4%BE%8B%EF%BC%9A">https://www.paintcodeapp.com/news）为例：</a></p>
<p><img src="https://m.360buyimg.com/img/jfs/t1/187496/9/28100/58605/6306ebd4E18053b0f/03166b813e48ecfc.jpg" alt="iPhone各代屏幕对照图"></p>
<p>先看iPhone Xs Max和iPhone XR。前者屏幕用CSS像素度量是414x896，而用实际渲染的物理像素度量则是1242x2688像素，简单换算可知，1242/414 = 3（或2688/896 = 3）,换句话说，iPhone Xs Max是人们常说的3倍屏（或@3x），即每个CSS像素对应9个物理像素（因为宽高均为3像素）。而iPhone XR呢，则是人们常说的2倍屏（或@2x），每个CSS像素对应4个物理像素。</p>
<p>当然还有1倍屏。上图最后一个iPhone 2G/3G/3GS，就是1倍屏，即每个CSS像素对应1个物理像素。像这种估计市面上已经绝迹的初代iPhone是不用适配的，因为1个CSS像素就对应屏幕上的1个物理像素。（当然，笔记本和电脑外接的大屏幕至今都是1倍屏，所以目前还不需要我们适配像素密度。）   </p>
<h3 id="二-viewport"><a href="#二-viewport" class="headerlink" title="二. viewport"></a>二. viewport</h3><p><img src="https://www.html.cn/newimg88/2016/03/viewport.jpg"></p>
<p>什么是viewport</p>
<p>viewport 是用户网页的可视区域，也可以叫做”视区”<br>手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中，通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中，用户可以通过平移和缩放来看网页的不同部分。<br>但是这样会破坏没有针对手机浏览器优化的网页的布局，所以移动端适配要针对viewport进行设置。</p>
<p>viewport的属性说明</p>
<table>
<thead>
<tr>
<th align="center">属性名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">width</td>
<td align="left">设置layout viewport的宽度，为一个正整数，或字符串width-device</td>
</tr>
<tr>
<td align="center">initial-scale</td>
<td align="left">设置页面的初始缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td align="center">minimum-scale</td>
<td align="left">允许用户的最小缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td align="center">maximum-scale</td>
<td align="left">允许用户的最大缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td align="center">height</td>
<td align="left">设置layout viewport的高度，这个属性对我们并不重要，很少使用</td>
</tr>
<tr>
<td align="center">user-scalable</td>
<td align="left">是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许</td>
</tr>
<tr>
<td align="center">target-densitydpi</td>
<td align="left">值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个。安卓中支持，当 target-densitydpi=device-dpi 时， css中的1px会等于物理像素中的1px。</td>
</tr>
<tr>
<td align="center">shrink-to-fit</td>
<td align="left">使用“width=device width”的Viewport meta标记会导致页面缩小以适应溢出视口边界的内容。您可以通过在meta标记中添加“shrink to fit=no”来覆盖此行为</td>
</tr>
<tr>
<td align="center">viewport-fit</td>
<td align="left">viewport-fit 这个属性来斛刘海全屏的问题，设置了这个属性后，页面就会填充整个刘海区域（前提是浏览器或套页面的app必须做了iphonex的兼容）</td>
</tr>
<tr>
<td align="center"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--我们项目中的viewport如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no, viewport-fit=cover&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="三-几种适配方案："><a href="#三-几种适配方案：" class="headerlink" title="三. 几种适配方案："></a>三. 几种适配方案：</h3><h5 id="1-百分比适配"><a href="#1-百分比适配" class="headerlink" title="1. 百分比适配"></a>1. 百分比适配</h5><p>利用%单位来实现移动端适配，每个元素的大小都相对于父元素的大小利用百分比的单位来实现，使用来定义子元素的宽度。</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="left">参考对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">height/width</td>
<td align="left">相对于有定位属性的父元素</td>
</tr>
<tr>
<td align="center">top/bottom/left/right</td>
<td align="left">相对于子元素的直接父元素</td>
</tr>
<tr>
<td align="center">padding/margin</td>
<td align="left">相对于直接父元素border-radius相对于自身</td>
</tr>
</tbody></table>
<blockquote>
<p>这种方案存在致命性问题，不能调整字体的大小，所以已经被淘汰了，基本不怎么使用。</p>
</blockquote>
<h5 id="2-media适配"><a href="#2-media适配" class="headerlink" title="2. @media适配"></a>2. @media适配</h5><p>@media是css3的新属性，它的原理是监控移动端设备的宽度，然后根据不同的宽度，适配不同的css样式，来实现移动端适配</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">320px</span>)&#123;</span><br><span class="line">    ....适配iphone4的css样式</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">375px</span>)&#123;</span><br><span class="line">    ....适配iphone6/<span class="number">7</span>/<span class="number">8</span>的css样式</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">414px</span>)&#123;</span><br><span class="line">    ....适配iphone6/<span class="number">7</span>/<span class="number">8</span> plus的css样式</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点：</p>
<ul>
<li>方法简单，只需修改css文件</li>
<li>调整屏幕宽度时不用刷新页面就可以响应页面布局</li>
</ul>
<p>缺点：</p>
<ul>
<li>代码量大，不方便维护</li>
<li>不能够完全适配所有的屏幕尺寸，需要编写多套css样式</li>
</ul>
</blockquote>
<h5 id="3-rem实现移动端适配-我们的M站使用的是rem"><a href="#3-rem实现移动端适配-我们的M站使用的是rem" class="headerlink" title="3. rem实现移动端适配 (我们的M站使用的是rem)"></a>3. rem实现移动端适配 (我们的M站使用的是rem)</h5><p><img src="https://www.runoob.com/wp-content/uploads/2015/12/1505196wwz21kmjckgk22k.jpg"></p>
<table>
<thead>
<tr>
<th align="center">单位</th>
<th align="left">说明(都是相对长度单位)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">px</td>
<td align="left">px是相对于显示器屏幕分辨率而言的</td>
</tr>
<tr>
<td align="center">em</td>
<td align="left">em相对于当前对象内文本的字体尺寸。如当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</td>
</tr>
<tr>
<td align="center">rem</td>
<td align="left">rem是CSS3新增的一个相对单位（root em，根em）, 与em的区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小</td>
</tr>
</tbody></table>
<p><strong>通过rem来实现适配</strong>：rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的宽度发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。需要先动态设置html根元素的font-size,再计算出其他页面元素以rem为固定单位的值</p>
<p><strong>控制font-size的js代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> deviceWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">        deviceWidth = deviceWidth &lt; <span class="number">320</span> ? <span class="number">320</span> : deviceWidth &gt; <span class="number">640</span> ? <span class="number">640</span> : deviceWidth;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = deviceWidth / <span class="number">7.5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的js代码中deviceWidth/7.5，表示font-size用deviceWidth/7.5的值来表示，1rem的值就是deviceWidth/7.5，当视口容器发生变化时就可以动态设置font-size的大小，不论页面宽度变大还是缩小，视口宽度都会被等分为7.5份，每一份就是1rem,从而1rem在不同的视觉容器中表示不同的大小，但在视口总宽度中的占比是不变的，实现了等比适配。<br>这个7.5在这里并不是一个固定的值，也可以设置为其他值，因为设计稿一般是根据iphone6/7/8的宽度来设计，一般为375或者750,所以为了方便计算，在这里取7.5，能够被整除方便后面的计算。</p>
<blockquote>
<p>优点：</p>
<ul>
<li>rem单位是根据根元素font-size决定大小，只要改变font-size的值，以rem为固定单位的元素大小也会发生响应式的改变</li>
</ul>
<p>缺点：</p>
<ul>
<li>必须通过一段js代码控制font-size的大小</li>
<li>控制font-size的js代码必须放在在页面第一次加载完成之前，并且放在引入的css样式代码之前。</li>
</ul>
</blockquote>
<h5 id="4-vw实现移动端适配-我们的新项目目前都是在使用vw"><a href="#4-vw实现移动端适配-我们的新项目目前都是在使用vw" class="headerlink" title="4. vw实现移动端适配 (我们的新项目目前都是在使用vw)"></a>4. vw实现移动端适配 (我们的新项目目前都是在使用vw)</h5><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc7baa93ca3f4f5c903405a02d5b67e1~tplv-k3u1fbpfcp-watermark.image?imageslim"></p>
<p>css3中引入与视口有关的新的单位vw和vh，vw表示相对于视口的宽度，vh表示相对于视口高度 </p>
<table>
<thead>
<tr>
<th align="center">单位</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">vw</td>
<td align="left">相对于视口的宽度，视口宽度是100vw</td>
</tr>
<tr>
<td align="center">vh</td>
<td align="left">相对于视口的高度，视口宽度是100vh</td>
</tr>
<tr>
<td align="center">vmin</td>
<td align="left">vw和vh中较小的值</td>
</tr>
<tr>
<td align="center">vmax</td>
<td align="left">vw和vh中较大的值</td>
</tr>
</tbody></table>
<p><strong>vw单位换算：</strong><br>视口宽度为100vw占满整个视口区域，那么1vw相当于占整个视口宽度的1%，所以1px= 1/375*100 vw。所有的页面元素都可以直接进行计算换算成vw单位，然后进行设置就可以了。</p>
<p>实际开发过程当中，计算每一个dom元素的vw尺寸又是很繁琐的, 有一个比较厉害的插件—— postcss-px-to-viewport，可以预处理css,将px单位转换为vw单位，需要进行一些相关的webpack配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install postcss-px-to-viewport</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">    	<span class="attr">plugins</span>: <span class="function">()=&gt;</span>[</span><br><span class="line">        	<span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class="line">        		<span class="attr">browsers</span>: [<span class="string">&#x27;last 5 versions&#x27;</span>]</span><br><span class="line">        	&#125;),</span><br><span class="line">        	<span class="built_in">require</span>(<span class="string">&#x27;postcss-px-to-viewport&#x27;</span>)(&#123;</span><br><span class="line">        		<span class="attr">viewportWidth</span>: <span class="number">375</span>,</span><br><span class="line">        		<span class="attr">viewportHeight</span>: <span class="number">1334</span>,</span><br><span class="line">        		<span class="attr">unitPrecision</span>: <span class="number">3</span>,</span><br><span class="line">        		<span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>,</span><br><span class="line">        		<span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>],</span><br><span class="line">                <span class="attr">minPixelValue</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">mediaQuery</span>: <span class="literal">false</span></span><br><span class="line">        	&#125;)</span><br><span class="line">    	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来是对postcss-px-to-viewport配置中的属性的介绍：</p>
<table>
<thead>
<tr>
<th>单位</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>viewportWidth</td>
<td>视口宽度（数字）</td>
</tr>
<tr>
<td>viewportHeight</td>
<td>视口高度（数字）</td>
</tr>
<tr>
<td>unitPrecision</td>
<td>设置的保留小数位数（数字）</td>
</tr>
<tr>
<td>viewportUnit</td>
<td>设置要转换的单位（字符串）</td>
</tr>
<tr>
<td>selectorBlackList</td>
<td>不需要进行转换的类名（数组）</td>
</tr>
<tr>
<td>minPixelValue</td>
<td>设置要替换的最小像素值（数字）</td>
</tr>
<tr>
<td>mediaQuery</td>
<td>允许在媒体查询中转换px（true/false）</td>
</tr>
</tbody></table>
<blockquote>
<p>优点：</p>
<ul>
<li>指定vw\vh相对与视口的宽高，由px换算单位成vw单位比较简单</li>
<li>通过postcss-px-to-viewport插件进行单位转换比较方便</li>
</ul>
<p>缺点：</p>
<ul>
<li>直接进行单位换算时百分比可能出现小数,计算不方便</li>
<li>兼容性-ie11不支持,少数低版本手机系统 ios8、android4.4以下不支持（目前的手机应用通常支持iOS 9+和Android 5+）</li>
</ul>
</blockquote>
<blockquote>
<p><strong>总结：总体来说，vw和rem是目前主流的移动端适配方案，兼容性不错。</strong></p>
</blockquote>
<h3 id="四-针对我们内部的开发流程及注意点："><a href="#四-针对我们内部的开发流程及注意点：" class="headerlink" title="四. 针对我们内部的开发流程及注意点："></a>四. 针对我们内部的开发流程及注意点：</h3><ol>
<li>拿到设计稿后要充分了解每一个页面的功能点、交互流程及页面流转。</li>
<li>和产品、UI沟通好、补全所有异常流状态：<ul>
<li>为空页面</li>
<li>断网页面</li>
<li>请求失败页面</li>
<li>toast，弹框等</li>
<li>小程序右上角不能放东西（胶囊占位）</li>
<li>文字适配：字段为空时候页面的展示方式，文案最长展示区域，且超出是否展示…</li>
</ul>
</li>
<li>开始动手实现，需要注意的点：<ul>
<li>布局 - 拆解页面结构，选择最佳布局方案（很重要）</li>
<li>字体 - 目前我们基本都在使用平方字体，由于字体包太大，浏览器需要下载额外的字体文件，这会延长用户等待的时间, 不建议引入太多字体文件，其他少量出现的特殊字体可以切图实现<ul>
<li>PingFangSC-Regular;</li>
<li>PingFangSC-Medium;</li>
<li>PingFangSC-Semibold;</li>
<li>HelveticaNeue-Bold - 无衬线字体，主要用在突出显示金额的地方</li>
</ul>
</li>
<li>行高 - 多模块并列展示时（例市场价，折扣价，购买文案），确认他们的对齐方式（居中对齐、底部对齐）</li>
<li>行间距 - 需要确认上下模块是否是动态的，如果是动态的，考虑怎么设置间距 </li>
<li>不同模块的层级问题 - 注意各个模块的层级关系，modal弹框和浮层icon，或者popup弹框和浮层icon等</li>
<li>注意模块圆角 </li>
<li>注意页边距(左右和底部) - iphonex底部横条（撑开34px）</li>
<li>语义化标签使用时自己注意默认样式</li>
</ul>
</li>
<li>与设计稿进行比对，调整出入</li>
</ol>
<p>总结：在我们现有的适配方案相对完善的基础上，我们在还原设计稿的路上最最最重要的点就是细心！细心！细心！</p>
<h3 id="五-扩展"><a href="#五-扩展" class="headerlink" title="五.扩展"></a>五.扩展</h3><ol>
<li><p><a href="https://mp.weixin.qq.com/s/3_5nkLo0ijwSBHrYqtt8Hw">工具推荐-像素级还原度检查工具</a>： chrome插件 - PerfectPixel by WellDoneCode (pixel perfect)</p>
</li>
<li><p><a href="https://www.ui.cn/detail/283956.html">三分钟弄懂iPhone X 设计尺寸和适配</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>UI</tag>
      </tags>
  </entry>
</search>
