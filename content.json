{"meta":{"title":"Aimee","subtitle":"","description":"","author":"Aimee liu","url":"https://aimee.github.io","root":"/"},"pages":[{"title":"分类","date":"2022-08-25T10:57:12.534Z","updated":"2022-08-25T10:57:12.534Z","comments":false,"path":"categories/index.html","permalink":"https://aimee.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-08-25T11:15:00.752Z","updated":"2022-08-25T11:15:00.752Z","comments":true,"path":"css/myStyle.css","permalink":"https://aimee.github.io/css/myStyle.css","excerpt":"","text":"/* 背景渐变 */ #web_bg{ background-image: linear-gradient(-225deg, #dfbacd 0%, #B8DCFF 48%, #58abf3 100%); /* linear-gradient(-225deg, #dfbacd 0%, #B8DCFF 48%, #58abf3 100%) */ /* background-image: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); */ } #footer, #nav { background: none; } #footer::before{ background: none; } /* 文章页H1-H6图标样式效果 */ h1::before, h2::before, h3::before, h4::before, h5::before, h6::before { -webkit-animation: ccc 1.6s linear infinite ; animation: ccc 1.6s linear infinite ; } @-webkit-keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } } @keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } } #content-inner.layout h1::before { color: #ef50a8 ; margin-left: -31px; font-size: 26px; margin-top: -5px; } #content-inner.layout h2::before { color: #fb7061 ; margin-left: -27px; font-size: 22px; margin-top: -3px; } #content-inner.layout h3::before { color: #ffbf00 ; margin-left: -25px; font-size: 20px; margin-top: -2px; } #content-inner.layout h4::before { color: #a9e000 ; font-size: 16px; margin-top: -2px; } #content-inner.layout h5::before { color: #57c850 ; margin-left: -18px; font-size: 14px; margin-top: 0; } #content-inner.layout h6::before { color: #5ec1e0 ; margin-left: -18px; font-size: 13px; margin-top: 0; } #content-inner.layout h1:hover, #content-inner.layout h2:hover, #content-inner.layout h3:hover, #content-inner.layout h4:hover, #content-inner.layout h5:hover, #content-inner.layout h6:hover { color: #49b1f5 ; } #content-inner.layout h1:hover::before, #content-inner.layout h2:hover::before, #content-inner.layout h3:hover::before, #content-inner.layout h4:hover::before, #content-inner.layout h5:hover::before, #content-inner.layout h6:hover::before { color: #49b1f5 ; -webkit-animation: ccc 3.2s linear infinite ; animation: ccc 3.2s linear infinite ; }"},{"title":"Repositories","date":"2022-08-25T07:29:04.330Z","updated":"2022-08-24T10:08:03.943Z","comments":false,"path":"repository/index.html","permalink":"https://aimee.github.io/repository/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-08-25T07:29:04.334Z","updated":"2022-08-24T10:08:03.937Z","comments":false,"path":"about/index.html","permalink":"https://aimee.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"404 Not Found：该页无法显示","date":"2022-08-26T03:53:36.780Z","updated":"2022-08-26T03:53:36.780Z","comments":false,"path":"/404.html","permalink":"https://aimee.github.io/404.html","excerpt":"","text":""},{"title":"标签","date":"2022-08-25T10:57:12.535Z","updated":"2022-08-25T10:57:12.535Z","comments":true,"path":"tags/index.html","permalink":"https://aimee.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"react项目接入单测","slug":"react项目接入单测","date":"2020-08-30T12:32:37.000Z","updated":"2022-08-25T10:57:12.528Z","comments":true,"path":"2020/08/30/react项目接入单测/","link":"","permalink":"https://aimee.github.io/2020/08/30/react%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5%E5%8D%95%E6%B5%8B/","excerpt":"","text":"1. npm包依赖项配置123456789101112131415// 引入jestnpm install jest@26.6.3 -D// 接入bamboo使用，不接入可不引入npm install jest-bamboo-reporter -D // 输出报告npm install jest-html-reporter -D// Enzyme 是一个用于 React 的 JavaScript 测试实用程序，可以更轻松地测试 React 组件的输出npm install enzyme enzyme-adapter-react-16 -D// 使用babelnpm i babel-jest @babel/core @babel/preset-env 2. jest配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * jest.conf.js */const path = require(&#x27;path&#x27;);module.exports = &#123; clearMocks: true, // 每次测试前自动清除模拟调用、实例和结果。相当于在每次测试之前调用 jest.clearAllMocks() collectCoverageFrom: [ // 需指定收集的覆盖率范围，这样统计的工程的覆盖率更加准确 &quot;&lt;rootDir&gt;/src/utils/util.js&quot; ], collectCoverage: true,//需开启收集覆盖率报告开关 coverageDirectory: &quot;&lt;rootDir&gt;/test/coverage&quot;,//指定输出单元测试覆盖率报告路径，推荐为test/coverage coveragePathIgnorePatterns: [ &quot;&lt;rootDir&gt;/build/&quot;, &quot;&lt;rootDir&gt;/node_modules/&quot; ], moduleDirectories: [ &quot;node_modules&quot;, &quot;src&quot; ], moduleFileExtensions: [&#x27;ts&#x27;, &#x27;tsx&#x27;, &#x27;js&#x27;, &#x27;jsx&#x27;, &#x27;json&#x27;, &#x27;node&#x27;], // 模块文件扩展名，可以将常用的文件类型放在左边 moduleNameMapper: &#123; // 从正则表达式到模块名称或模块名称数组的映射，允许存根资源，例如具有单个模块的图像或样式 &#x27;^.+\\\\.(css|scss|less)$&#x27;: &#x27;&lt;rootDir&gt;/test/style-mock.js&#x27;, &#x27;@/(.*)$&#x27;: &#x27;&lt;rootDir&gt;/src/$1&#x27;, &#125;, modulePaths: [&quot;&lt;rootDir&gt;&quot;], rootDir: path.resolve(__dirname, &quot;../&quot;), // 测试根目录 roots: [&quot;&lt;rootDir&gt;&quot;], // Jest 的检索文件的根目录 reporters: [ //自定义报告 &quot;default&quot;, //需要添加jest的默认报告 [&quot;./node_modules/jest-html-reporter&quot;, &#123; //在额外补充jest-html-report，生成test-report.html文件 &quot;pageTitle&quot;: &quot;Test Report&quot;, &quot;outputPath&quot;: &quot;./test/report/test-report.html&quot; //推荐指定test-report.html的输出路径为test/report/test-report.html &#125;] ], // setupFiles: [&#x27;jest-canvas-mock&#x27;], testEnvironment: &#x27;jsdom&#x27;, //默认测试环境是node。如果你的工程是web app，可设置测试环境为jsdom，模拟浏览器环境 setupFilesAfterEnv: [&#x27;&lt;rootDir&gt;/test/setup&#x27;], testMatch: [ //匹配到的测试用例，建议将测试用例放置在test目录下 &quot;&lt;rootDir&gt;/test/**/*.spec.js&quot;, &quot;&lt;rootDir&gt;/test/**/*.spec.jsx&quot; ], transform: &#123;&quot;^.+\\\\.[t|j]sx?$&quot;: &quot;babel-jest&quot;&#125;, transformIgnorePatterns: [&quot;/node_modules/&quot;], testPathIgnorePatterns: [&quot;/node_modules/&quot;],// 用正则来匹配不用测试的文件 testResultsProcessor: &quot;jest-bamboo-reporter&quot;, //自定义测试用例执行结果处理器，此处我们制定为jest-bamboo-report&#125;; 123456789101112131415// package.json中配置&quot;scripts&quot;: &#123; //执行单元测试时，指定配置文件和输出路径 &quot;test&quot;: &quot;cross-env JEST_REPORT_FILE=&#x27;./test/report/test-report.json&#x27; jest --config test/jest.conf.js&quot;&#125;&quot;babel&quot;: &#123; &quot;presets&quot;: [ &quot;@babel/preset-env&quot;, &quot;react-app&quot; ], &quot;plugins&quot;: [ &quot;@babel/plugin-syntax-dynamic-import&quot; ]&#125; 3. setup配置123456789// React的组件单元测试，以及快照测试，可以结合 enzyme或react-jest-renderer使用 创建setup文件// setup.jsimport &#x27;regenerator-runtime/runtime&#x27;import Enzyme from &quot;enzyme&quot;;import EnzymeAdapter from &quot;enzyme-adapter-react-16&quot;;Enzyme.configure(&#123; adapter: new EnzymeAdapter()&#125;); 4. mock数据配置12// style-mock.jsmodule.exports = &#123;&#125;; 5. 测试方法文件1234567891011// utils.spec.jsimport &#123; getUrlParams&#125; from &#x27;../../src/utils/index&#x27; describe(&quot;getUrlParams&quot;, () =&gt; &#123; it(&#x27;getUrlParams&#x27;, () =&gt; &#123; const result = getUrlParams; expect(typeof result).toBe(&#x27;function&#x27;) &#125;) &#125;) 参考文档：https://www.jestjs.cn/docs/getting-started","categories":[{"name":"前端","slug":"前端","permalink":"https://aimee.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"单测","slug":"单测","permalink":"https://aimee.github.io/tags/%E5%8D%95%E6%B5%8B/"}]},{"title":"高精度还原设计稿","slug":"高精度还原设计稿","date":"2020-02-15T12:32:37.000Z","updated":"2022-08-25T10:57:12.531Z","comments":true,"path":"2020/02/15/高精度还原设计稿/","link":"","permalink":"https://aimee.github.io/2020/02/15/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%98%E5%8E%9F%E8%AE%BE%E8%AE%A1%E7%A8%BF/","excerpt":"","text":"一. 适配与还原适配的目的是为保证用户体验，比如图片不失真、以及在不同大小的屏幕上呈现比例相同的页面布局，这也就是所谓的百分之百还原设计稿，或像素级还原设计稿。 H5适配手机主要有两个维度： 适配不同像素密度 - 通常指图片如何在3倍屏和2倍屏上显示不失真。当然，适配原则非常简单：1个图片像素对应1个物理像素，图片就不会失真。(目前我们页面里的图片用的都是3倍图) 适配不同屏幕大小 - 原则非常简单,确保页面布局的度量与屏幕大小保持一定比例。（目前我们的设计稿都是750像素的） 像素密度，顾名思义就是CSS中的1像素对应多少物理像素。我们以这张iPhone各代屏幕对照图（来源：https://www.paintcodeapp.com/news）为例： 先看iPhone Xs Max和iPhone XR。前者屏幕用CSS像素度量是414x896，而用实际渲染的物理像素度量则是1242x2688像素，简单换算可知，1242/414 = 3（或2688/896 = 3）,换句话说，iPhone Xs Max是人们常说的3倍屏（或@3x），即每个CSS像素对应9个物理像素（因为宽高均为3像素）。而iPhone XR呢，则是人们常说的2倍屏（或@2x），每个CSS像素对应4个物理像素。 当然还有1倍屏。上图最后一个iPhone 2G/3G/3GS，就是1倍屏，即每个CSS像素对应1个物理像素。像这种估计市面上已经绝迹的初代iPhone是不用适配的，因为1个CSS像素就对应屏幕上的1个物理像素。（当然，笔记本和电脑外接的大屏幕至今都是1倍屏，所以目前还不需要我们适配像素密度。） 二. viewport 什么是viewport viewport 是用户网页的可视区域，也可以叫做”视区”手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中，通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中，用户可以通过平移和缩放来看网页的不同部分。但是这样会破坏没有针对手机浏览器优化的网页的布局，所以移动端适配要针对viewport进行设置。 viewport的属性说明 属性名 说明 width 设置layout viewport的宽度，为一个正整数，或字符串width-device initial-scale 设置页面的初始缩放值，为一个数字，可以带小数 minimum-scale 允许用户的最小缩放值，为一个数字，可以带小数 maximum-scale 允许用户的最大缩放值，为一个数字，可以带小数 height 设置layout viewport的高度，这个属性对我们并不重要，很少使用 user-scalable 是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许 target-densitydpi 值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个。安卓中支持，当 target-densitydpi=device-dpi 时， css中的1px会等于物理像素中的1px。 shrink-to-fit 使用“width=device width”的Viewport meta标记会导致页面缩小以适应溢出视口边界的内容。您可以通过在meta标记中添加“shrink to fit=no”来覆盖此行为 viewport-fit viewport-fit 这个属性来斛刘海全屏的问题，设置了这个属性后，页面就会填充整个刘海区域（前提是浏览器或套页面的app必须做了iphonex的兼容） 一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下： 123456789&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;!--我们项目中的viewport如下 --&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no, viewport-fit=cover&quot;/&gt; 三. 几种适配方案：1. 百分比适配利用%单位来实现移动端适配，每个元素的大小都相对于父元素的大小利用百分比的单位来实现，使用来定义子元素的宽度。 属性 参考对象 height/width 相对于有定位属性的父元素 top/bottom/left/right 相对于子元素的直接父元素 padding/margin 相对于直接父元素border-radius相对于自身 这种方案存在致命性问题，不能调整字体的大小，所以已经被淘汰了，基本不怎么使用。 2. @media适配@media是css3的新属性，它的原理是监控移动端设备的宽度，然后根据不同的宽度，适配不同的css样式，来实现移动端适配 1234567891011@media screen and (max-width: 320px)&#123; ....适配iphone4的css样式&#125;@media screen and (max-width: 375px)&#123; ....适配iphone6/7/8的css样式&#125;@media screen and (max-width: 414px)&#123; ....适配iphone6/7/8 plus的css样式&#125;...... 优点： 方法简单，只需修改css文件 调整屏幕宽度时不用刷新页面就可以响应页面布局 缺点： 代码量大，不方便维护 不能够完全适配所有的屏幕尺寸，需要编写多套css样式 3. rem实现移动端适配 (我们的M站使用的是rem) 单位 说明(都是相对长度单位) px px是相对于显示器屏幕分辨率而言的 em em相对于当前对象内文本的字体尺寸。如当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸 rem rem是CSS3新增的一个相对单位（root em，根em）, 与em的区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小 通过rem来实现适配：rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的宽度发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。需要先动态设置html根元素的font-size,再计算出其他页面元素以rem为固定单位的值 控制font-size的js代码 12345678&lt;script type=&quot;text/javascript&quot;&gt; (function() &#123; var deviceWidth = document.documentElement.clientWidth; deviceWidth = deviceWidth &lt; 320 ? 320 : deviceWidth &gt; 640 ? 640 : deviceWidth; document.documentElement.style.fontSize = deviceWidth / 7.5 + &#x27;px&#x27;; &#125;)();&lt;/script&gt; 上面的js代码中deviceWidth/7.5，表示font-size用deviceWidth/7.5的值来表示，1rem的值就是deviceWidth/7.5，当视口容器发生变化时就可以动态设置font-size的大小，不论页面宽度变大还是缩小，视口宽度都会被等分为7.5份，每一份就是1rem,从而1rem在不同的视觉容器中表示不同的大小，但在视口总宽度中的占比是不变的，实现了等比适配。这个7.5在这里并不是一个固定的值，也可以设置为其他值，因为设计稿一般是根据iphone6/7/8的宽度来设计，一般为375或者750,所以为了方便计算，在这里取7.5，能够被整除方便后面的计算。 优点： rem单位是根据根元素font-size决定大小，只要改变font-size的值，以rem为固定单位的元素大小也会发生响应式的改变 缺点： 必须通过一段js代码控制font-size的大小 控制font-size的js代码必须放在在页面第一次加载完成之前，并且放在引入的css样式代码之前。 4. vw实现移动端适配 (我们的新项目目前都是在使用vw) css3中引入与视口有关的新的单位vw和vh，vw表示相对于视口的宽度，vh表示相对于视口高度 单位 含义 vw 相对于视口的宽度，视口宽度是100vw vh 相对于视口的高度，视口宽度是100vh vmin vw和vh中较小的值 vmax vw和vh中较大的值 vw单位换算：视口宽度为100vw占满整个视口区域，那么1vw相当于占整个视口宽度的1%，所以1px= 1/375*100 vw。所有的页面元素都可以直接进行计算换算成vw单位，然后进行设置就可以了。 实际开发过程当中，计算每一个dom元素的vw尺寸又是很繁琐的, 有一个比较厉害的插件—— postcss-px-to-viewport，可以预处理css,将px单位转换为vw单位，需要进行一些相关的webpack配置 12345678910111213141516171819202122// 安装npm install postcss-px-to-viewport// 配置&#123; loader: &#x27;postcss-loader&#x27;, options: &#123; plugins: ()=&gt;[ require(&#x27;autoprefixer&#x27;)(&#123; browsers: [&#x27;last 5 versions&#x27;] &#125;), require(&#x27;postcss-px-to-viewport&#x27;)(&#123; viewportWidth: 375, viewportHeight: 1334, unitPrecision: 3, viewportUnit: &#x27;vw&#x27;, selectorBlackList: [&#x27;.ignore&#x27;, &#x27;.hairlines&#x27;], minPixelValue: 1, mediaQuery: false &#125;) ]&#125; 接下来是对postcss-px-to-viewport配置中的属性的介绍： 单位 含义 viewportWidth 视口宽度（数字） viewportHeight 视口高度（数字） unitPrecision 设置的保留小数位数（数字） viewportUnit 设置要转换的单位（字符串） selectorBlackList 不需要进行转换的类名（数组） minPixelValue 设置要替换的最小像素值（数字） mediaQuery 允许在媒体查询中转换px（true/false） 优点： 指定vw\\vh相对与视口的宽高，由px换算单位成vw单位比较简单 通过postcss-px-to-viewport插件进行单位转换比较方便 缺点： 直接进行单位换算时百分比可能出现小数,计算不方便 兼容性-ie11不支持,少数低版本手机系统 ios8、android4.4以下不支持（目前的手机应用通常支持iOS 9+和Android 5+） 总结：总体来说，vw和rem是目前主流的移动端适配方案，兼容性不错。 四. 针对我们内部的开发流程及注意点： 拿到设计稿后要充分了解每一个页面的功能点、交互流程及页面流转。 和产品、UI沟通好、补全所有异常流状态： 为空页面 断网页面 请求失败页面 toast，弹框等 小程序右上角不能放东西（胶囊占位） 文字适配：字段为空时候页面的展示方式，文案最长展示区域，且超出是否展示… 开始动手实现，需要注意的点： 布局 - 拆解页面结构，选择最佳布局方案（很重要） 字体 - 目前我们基本都在使用平方字体，由于字体包太大，浏览器需要下载额外的字体文件，这会延长用户等待的时间, 不建议引入太多字体文件，其他少量出现的特殊字体可以切图实现 PingFangSC-Regular; PingFangSC-Medium; PingFangSC-Semibold; HelveticaNeue-Bold - 无衬线字体，主要用在突出显示金额的地方 行高 - 多模块并列展示时（例市场价，折扣价，购买文案），确认他们的对齐方式（居中对齐、底部对齐） 行间距 - 需要确认上下模块是否是动态的，如果是动态的，考虑怎么设置间距 不同模块的层级问题 - 注意各个模块的层级关系，modal弹框和浮层icon，或者popup弹框和浮层icon等 注意模块圆角 注意页边距(左右和底部) - iphonex底部横条（撑开34px） 语义化标签使用时自己注意默认样式 与设计稿进行比对，调整出入 总结：在我们现有的适配方案相对完善的基础上，我们在还原设计稿的路上最最最重要的点就是细心！细心！细心！ 五.扩展 工具推荐-像素级还原度检查工具： chrome插件 - PerfectPixel by WellDoneCode (pixel perfect) 三分钟弄懂iPhone X 设计尺寸和适配","categories":[{"name":"前端","slug":"前端","permalink":"https://aimee.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"UI","slug":"UI","permalink":"https://aimee.github.io/tags/UI/"}]},{"title":"《史蒂夫·乔布斯传》","slug":"史蒂夫·乔布斯传","date":"2020-01-30T12:32:37.000Z","updated":"2022-08-25T10:57:12.529Z","comments":true,"path":"2020/01/30/史蒂夫·乔布斯传/","link":"","permalink":"https://aimee.github.io/2020/01/30/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0/","excerpt":"","text":"史蒂夫·乔布斯传沃尔特·艾萨克森28个想法 ◆ 版权信息 那些疯狂到以为自己能够改变世界的人，才能真正改变世界 ◆ 前言 本书是如何诞生的 一个具有强烈个性的人身上集合了人文和科学的天赋后所能产生的那种创造力，我相信这种创造力也是在21世纪建立创新型经济的关键因素 ◆ 第一章 童年 我很幸运，因为当我还是个孩子的时候，我的父亲，还有希斯工具盒都让我相信，我能做出任何东西。 ◆ 第四章 雅达利与印度 如果他认为某件事应该发生，那他就会尽力让它发生。 如果你表现得好像你能做某件事，那就能起到作用。我告诉他，装得好像你掌控了一切，别人就会以为你真的掌控了一切。 ◆ 第八章 施乐和丽萨 好的执行力和杰出的创意同样重要 ◆ 第十三章 制造 过程就是奖励 ◆ 第十六章 盖茨与乔布斯 史蒂夫用自己超级蛊惑人心的方式，宣称Mac将如何改变世界，疯了似的让人们超负荷工作，气氛异常紧张，人际关系也很复杂 。苹果公司一直以来在执行上更富创新，更有想象力，也更有品位，而且他们的设计也更好。但是，虽然一开始微软只做出了一系列粗制滥造的复制品，它最终还是赢得了操作系统之争。这一事实说明世界并非完美：最好最创新的产品并非总是赢家 ◆ 第十七章 伊卡洛斯 乔布斯精于操控别人，只要他愿意，他就能哄骗和迷惑其他人而不觉羞愧。但是，他并不善于算计和搞阴谋，尽管有些人不这么看；他不愿意也没耐心与别人交心。 ◆ 第十八章 NeXT 就在此后，一位记者问乔布斯为什么这款电脑会推迟这么久，乔布斯回答说：“并不迟，它领先了时代5年 ◆ 第十九章 皮克斯 人是创造性动物，面对工具，他们能想出发明者未曾想过的各种聪明的使用方法 ◆ 第二十章 凡人 “他相信匮乏即是富足，自律产生喜悦，”她说，“他知道一个大多数人不知道的道理：物极必反 ◆ 第二十三章 复出 长盛不衰的公司都知道如何重塑自我。 ◆ 第二十四章 非同凡想 致疯狂的人。他们特立独行。他们桀骜不驯。他们惹是生非。他们格格不入。他们用与众不同的眼光看待事物。他们不喜欢墨守成规。他们也不愿安于现状。你可以认同他们，反对他们，颂扬或是诋毁他们。但唯独不能漠视他们。因为他们改变了寻常事物。他们推动人类向前迈进。或许他们是别人眼里的疯子，但他们却是我们眼中的天才。因为只有那些疯狂到以为自己能够改变世界的人……才能真正改变世界。 ◆ 第二十五章 设计原则 简洁并不仅仅是视觉上的，也不仅仅是把杂乱无章的东西变少或抹掉，而是要挖掘复杂性的深度。要想获得简洁，你就必须要挖得足够深。 ◆ 第二十九章 数字中枢 法德尔学到了一课：“史蒂夫关注当下，说话直来直去。有一次他告诉我：‘如果你一定要用幻灯片来讲，那说明你不知道自己要讲什么。’” ◆ 第三十章 iTunes商店 从苹果公司创立之初，我就意识到，我们的成功是来自知识产权。如果人们可以任意复制或偷取我们的软件，我们早就破产了。如果知识产权不受到保护，我们也没有动力再去制作新软件或设计新产品了。如果没有了对知识产权的保护，那么很多创意公司就会消失，或者根本不会出现。其实说到底，道理很简单：偷窃是不道德的。这样做会伤害其他人，也有损自己的名誉。 各行各业都有自己的套路呢😄 唱片公司赚钱的模式是在一张专辑中主打两三首好歌，另外填充一些一般的作品，然后一起打包出售 “他坐在一台苹果电脑前，就像是一个孩子在玩他心爱的玩具。和其他CEO不同，他对他的产品全心投入 ◆ 第三十一章 爱音乐的人 在乔布斯的记忆中，唯一让他紧张得舌头打结的时刻就是见到鲍勃·迪伦 ◆ 第三十四章 第一回合 记住自己很快就要死了，这是我面对人生重大选择时最重要的工具。因为，几乎一切——所有外界的期望，所有骄傲，所有对于困窘和失败的恐惧——这些东西都在死亡面前烟消云散，只留下真正重要的东西。记住自己终会死去，是我所知最好的方式，避免陷入认为自己会失去什么的陷阱。你已是一无所有，没理由不追随内心。 正如他在斯坦福大学演讲时所说的那样，疾病提醒着自己，已没有什么可失去的，因此他应该全速向前、锐意进取。 ◆ 第三十九章 飞向太空 20年前我们相知不多。我们跟着感觉走，你让我着迷得飞上了天。当我们在阿瓦尼举行婚礼时天在下雪。很多年过去了，有了孩子们，有美好的时候，有艰难的时候，但从来没有过糟糕的时候。我们的爱和尊敬经历了时间的考验而且与日俱增。我们一起经历了那么多，现在我们回到20年前开始的地方——老了，也更有智慧了——我们的脸上和心上都有了皱纹。我们现在了解了很多生活的欢乐、痛苦、秘密和奇迹，我们依然在一起。我的双脚从未落回地面。 ◆ 第四十章 第三回合 我有过很幸运的事业，有过很幸运的人生。”他回答说，“我已经做了我能做的一切。” ◆ 第四十一章 遗产 这牺牲了黑客精神，却创造出一种无缝而简单的用户体验 这虽然没有催生出最优雅的计算机，但是却帮助微软统治了操作系统世界。当苹果的市场份额缩小到5%以下时，微软的策略被视为个人电脑领域的胜利者。 如果你不忙着求生，你就在忙着求死","categories":[{"name":"读书摘记","slug":"读书摘记","permalink":"https://aimee.github.io/categories/%E8%AF%BB%E4%B9%A6%E6%91%98%E8%AE%B0/"}],"tags":[{"name":"摘记","slug":"摘记","permalink":"https://aimee.github.io/tags/%E6%91%98%E8%AE%B0/"}]},{"title":"Hexo+GitHub快速搭建个人博客","slug":"Hexo+GitHub快速搭建个人博客","date":"2019-12-01T12:32:37.000Z","updated":"2022-08-26T04:09:04.367Z","comments":true,"path":"2019/12/01/Hexo+GitHub快速搭建个人博客/","link":"","permalink":"https://aimee.github.io/2019/12/01/Hexo+GitHub%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页 一、 安装篇1. 安装前提 Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) Git 2. 安装 Hexo $ npm install -g hexo3. 安装以后，可以使用以下两种方式执行 Hexo： npx hexo &lt;command&gt; 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中 echo &#39;PATH=&quot;$PATH:./node_modules/.bin&quot;&#39; &gt;&gt; ~/.profile 即可直接使用 hexo &lt;command&gt;： 二、建站篇1. 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; $ npm install 新建完成后，指定文件夹的目录如下： 1234567├── _config.yml // 配置文件├── package.json ├── scaffolds // 模版文件夹├── source // 资源文件夹| ├── _drafts| └── _posts└── themes //主题文件夹 三、写作篇1. 你可以执行下列命令来创建一篇新文章或者新的页面$ hexo new &lt;title&gt;, 可以文件夹_posts目录下将会看到已经创建的文件 eg: hello-world.md 12345678910111213 --- title: Hello World date: 2018/7/13 20:46:25 categories: - Life - Diary tags: - PS3 - Games ---&lt;!-- 内容区域 --&gt;Hello World!!! 四、命令篇1. 服务器（Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用） $ npm install hexo-server --save $ hexo server // 启动服务器，体验Hexo $ hexo server -p 5000 // 端口号被占用时，可以更换端口启动服务器 $ hexo generate // 使用 Hexo 生成静态文件 $ hexo generate --watch // Hexo 能够监视文件变动并立即重新生成静态文件 2. 完成后部署（部署之前需要安装一个扩展： $ npm install hexo-deployer-git --save） $ hexo generate --deploy 可以简写为 $ hexo g -d $ hexo deploy --generate 可以简写为 $ hexo d -g 五、部署篇 (将 Hexo 部署到 GitHub Pages)1. 你需要有个GitHub账号，新建一个repository，repository要直接命名为 &lt;你的GitHub用户名&gt;.github.io，你博客的域名将是 &lt;你的GitHub用户名&gt;.github.io（**项目名称必须是这个!!!**）。2. 将你的 Hexo 站点文件夹推送到 repository 中 设置git推送的账户（之前没有推送过） git config --global user.name &quot;xxx&quot; git config --global user.email &quot;xxx@gmail.com&quot; GitHub 配置公钥 输入 cd ~/.ssh，检查是否有.ssh的文件夹，输入ls查看。如果有id_rsa,id_rsa_pub,known_hosts,则说明存在。 输入 ssh-keygen -t rsa -C &quot;你的github邮箱地址&quot; ,连续三个回车，生成密钥，也会自动生成两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh） 输入eval &quot;$(ssh-agent -s)&quot;，添加密钥到 ssh-agent 输入ssh-add ~/.ssh/id_rsa，添加生成的 SSH key 到 ssh-agent 登录Github，点击头像下的settings，点击 SSH and GPG keys，点击 右侧的 new SSH key，用VS Code打开id_rsa.pub，全部复制粘贴到新建的 SSH key 中。 配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）,配置成如下效果。 1234deploy:type: gitrepo: git@github.com:boyue0/boyue0.github.io.gitbranch: master 使用命令：hexo d g，生成以及部署, 完成部署后，即可访问 https://&lt;你的GitHub用户名&gt;.github.io查看你的博客 六、插件篇1. Hexo 利用 browsersync 进行自动刷新： (修改 Markdown 文件并保存后浏览器可以自动刷新) npm install -g browser-sync // 安装 Browsersync npm install hexo-browsersync --save // 安装 Hexo 插件 更多好用插件请移步：Hexo插件库 七、主题篇 （一些好看的主题）1. Butterfly Github 地址：https://github.com/jerryc127/hexo-theme-butterfly 在线演示：https://butterfly.js.org/ 安装教程：https://butterfly.js.org/posts/21cfbf15/ 2. ayer Github 地址：https://github.com/shen-yu/hexo-theme-ayer 在线演示：https://shen-yu.gitee.io/ 安装教程：https://shen-yu.gitee.io/2019/ayer/ 3. Fluid Github 地址：https://github.com/fluid-dev/hexo-theme-fluid 在线演示：https://hexo.fluid-dev.com/ 安装教程：Hexo Fluid 用户手册 (fluid-dev.com) 4. black-blue Github 地址：https://github.com/maochunguang/black-blue 在线演示：https://geeksblog.cc/ 安装教程：https://github.com/maochunguang 更多好看主题请移步：Hexo主题库","categories":[{"name":"工具","slug":"工具","permalink":"https://aimee.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://aimee.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-30T12:32:37.000Z","updated":"2022-08-25T10:57:12.527Z","comments":true,"path":"2019/11/30/hello-world/","link":"","permalink":"https://aimee.github.io/2019/11/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"前端","slug":"前端","permalink":"https://aimee.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"aaa","slug":"aaa","permalink":"https://aimee.github.io/tags/aaa/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"https://aimee.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"读书摘记","slug":"读书摘记","permalink":"https://aimee.github.io/categories/%E8%AF%BB%E4%B9%A6%E6%91%98%E8%AE%B0/"},{"name":"工具","slug":"工具","permalink":"https://aimee.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"单测","slug":"单测","permalink":"https://aimee.github.io/tags/%E5%8D%95%E6%B5%8B/"},{"name":"UI","slug":"UI","permalink":"https://aimee.github.io/tags/UI/"},{"name":"摘记","slug":"摘记","permalink":"https://aimee.github.io/tags/%E6%91%98%E8%AE%B0/"},{"name":"工具","slug":"工具","permalink":"https://aimee.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"aaa","slug":"aaa","permalink":"https://aimee.github.io/tags/aaa/"}]}